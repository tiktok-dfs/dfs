// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: proto/namenode/namenode.proto

package namenode

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NameNodeServiceClient is the client API for NameNodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NameNodeServiceClient interface {
	GetBlockSize(ctx context.Context, in *GetBlockSizeRequest, opts ...grpc.CallOption) (*GetBlockSizeResponse, error)
	ReadData(ctx context.Context, in *ReadRequst, opts ...grpc.CallOption) (*ReadResponse, error)
	WriteData(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error)
	DeleteData(ctx context.Context, in *DeleteDataReq, opts ...grpc.CallOption) (*DeleteDataResp, error)
}

type nameNodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNameNodeServiceClient(cc grpc.ClientConnInterface) NameNodeServiceClient {
	return &nameNodeServiceClient{cc}
}

func (c *nameNodeServiceClient) GetBlockSize(ctx context.Context, in *GetBlockSizeRequest, opts ...grpc.CallOption) (*GetBlockSizeResponse, error) {
	out := new(GetBlockSizeResponse)
	err := c.cc.Invoke(ctx, "/namenode_.NameNodeService/GetBlockSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameNodeServiceClient) ReadData(ctx context.Context, in *ReadRequst, opts ...grpc.CallOption) (*ReadResponse, error) {
	out := new(ReadResponse)
	err := c.cc.Invoke(ctx, "/namenode_.NameNodeService/ReadData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameNodeServiceClient) WriteData(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error) {
	out := new(WriteResponse)
	err := c.cc.Invoke(ctx, "/namenode_.NameNodeService/WriteData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameNodeServiceClient) DeleteData(ctx context.Context, in *DeleteDataReq, opts ...grpc.CallOption) (*DeleteDataResp, error) {
	out := new(DeleteDataResp)
	err := c.cc.Invoke(ctx, "/namenode_.NameNodeService/DeleteData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NameNodeServiceServer is the server API for NameNodeService service.
// All implementations must embed UnimplementedNameNodeServiceServer
// for forward compatibility
type NameNodeServiceServer interface {
	GetBlockSize(context.Context, *GetBlockSizeRequest) (*GetBlockSizeResponse, error)
	ReadData(context.Context, *ReadRequst) (*ReadResponse, error)
	WriteData(context.Context, *WriteRequest) (*WriteResponse, error)
	DeleteData(context.Context, *DeleteDataReq) (*DeleteDataResp, error)
	mustEmbedUnimplementedNameNodeServiceServer()
}

// UnimplementedNameNodeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNameNodeServiceServer struct {
}

func (UnimplementedNameNodeServiceServer) GetBlockSize(context.Context, *GetBlockSizeRequest) (*GetBlockSizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockSize not implemented")
}
func (UnimplementedNameNodeServiceServer) ReadData(context.Context, *ReadRequst) (*ReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadData not implemented")
}
func (UnimplementedNameNodeServiceServer) WriteData(context.Context, *WriteRequest) (*WriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteData not implemented")
}
func (UnimplementedNameNodeServiceServer) DeleteData(context.Context, *DeleteDataReq) (*DeleteDataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteData not implemented")
}
func (UnimplementedNameNodeServiceServer) mustEmbedUnimplementedNameNodeServiceServer() {}

// UnsafeNameNodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NameNodeServiceServer will
// result in compilation errors.
type UnsafeNameNodeServiceServer interface {
	mustEmbedUnimplementedNameNodeServiceServer()
}

func RegisterNameNodeServiceServer(s grpc.ServiceRegistrar, srv NameNodeServiceServer) {
	s.RegisterService(&NameNodeService_ServiceDesc, srv)
}

func _NameNodeService_GetBlockSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameNodeServiceServer).GetBlockSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/namenode_.NameNodeService/GetBlockSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameNodeServiceServer).GetBlockSize(ctx, req.(*GetBlockSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameNodeService_ReadData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameNodeServiceServer).ReadData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/namenode_.NameNodeService/ReadData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameNodeServiceServer).ReadData(ctx, req.(*ReadRequst))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameNodeService_WriteData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameNodeServiceServer).WriteData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/namenode_.NameNodeService/WriteData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameNodeServiceServer).WriteData(ctx, req.(*WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameNodeService_DeleteData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameNodeServiceServer).DeleteData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/namenode_.NameNodeService/DeleteData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameNodeServiceServer).DeleteData(ctx, req.(*DeleteDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

// NameNodeService_ServiceDesc is the grpc.ServiceDesc for NameNodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NameNodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "namenode_.NameNodeService",
	HandlerType: (*NameNodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlockSize",
			Handler:    _NameNodeService_GetBlockSize_Handler,
		},
		{
			MethodName: "ReadData",
			Handler:    _NameNodeService_ReadData_Handler,
		},
		{
			MethodName: "WriteData",
			Handler:    _NameNodeService_WriteData_Handler,
		},
		{
			MethodName: "DeleteData",
			Handler:    _NameNodeService_DeleteData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/namenode/namenode.proto",
}
